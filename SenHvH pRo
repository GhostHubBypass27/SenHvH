local Library = loadstring(game:HttpGet("https://pastebin.com/raw/kpLzpNXc"))()  

settings = {
   enabled = false; -- / true / false
   minCameraDistance = 1; -- / any number
   hatTransparency = .35; -- / 0 - 1 (0 being invisible)
   circleTransparency = 1; -- / 0 - 1 (0 being invisible)
   height = .75; -- / any number
   radius = 1; -- /-- any number
   sides = 25; -- / any number
   rainbow = false; -- / true / false
   color = Color3.fromRGB(128,18,255); -- / 0-255,0-255,0-255
   offset = Vector3.new(0,.75,0); -- / number,number,number (studs offset from head center)
}

local runservice = game:GetService('RunService');
local lplr = game:GetService('Players').LocalPlayer
local camera = workspace.CurrentCamera;
local tau = math.pi*2
local drawings = {};

for i = 1,settings.sides do
   drawings[i] = {Drawing.new('Line'),Drawing.new('Triangle')}
   drawings[i][1].ZIndex = 2;
   drawings[i][1].Thickness = 2;
   drawings[i][2].ZIndex = 1;
   drawings[i][2].Filled = true;
end

runservice.RenderStepped:Connect(function()
   local pass = settings.enabled and lplr.Character and lplr.Character:FindFirstChild('Head') ~= nil and (camera.CFrame.p - camera.Focus.p).magnitude > settings.minCameraDistance and lplr.Character.Humanoid.Health > 0
   for i = 1,#drawings do
       local line,triangle = drawings[i][1], drawings[i][2];
       if pass then
           local color = settings.rainbow and Color3.fromHSV((tick() % 5 / 5 - (i / #drawings)) % 1,.5,1) or settings.color;
           local pos = lplr.Character.Head.Position + settings.offset;
           local topWorld = pos + Vector3.new(0,settings.height,0);

           local last, next = (i/settings.sides)*tau, ((i+1)/settings.sides)*tau;
           local lastWorld = pos + (Vector3.new(math.cos(last),0,math.sin(last))*settings.radius);
           local nextWorld = pos + (Vector3.new(math.cos(next),0,math.sin(next))*settings.radius);
           local lastScreen = camera:WorldToViewportPoint(lastWorld);
           local nextScreen = camera:WorldToViewportPoint(nextWorld);
           local topScreen = camera:WorldToViewportPoint(topWorld);

           line.From = Vector2.new(lastScreen.X,lastScreen.Y);
           line.To = Vector2.new(nextScreen.X,nextScreen.Y);
           line.Color = color;
           line.Transparency = settings.circleTransparency;
           line.Visible = true;

           triangle.PointA = Vector2.new(topScreen.X,topScreen.Y);
           triangle.PointB = line.From;
           triangle.PointC = line.To;
           triangle.Color = color;
           triangle.Transparency = settings.hatTransparency;
           triangle.Visible = true;
       else
           line.Visible = false;
           triangle.Visible = false;
       end
   end
end)

getgenv().SenHVH = {
    target = {
        Enabled = false,
        Locking,
        JumpOffset = 0.06,
        RealJumpOffset = 0.06,
        Prediction = 0.13322,
        Notifications = false,
        Part = 'HumanoidRootPart',
        RandomHP = false,
        UnlockedOnKnocked = false,
        Forcefield = false,
        FakeHitbox = false,
        Dot = false,
        Tracer = false,
        LookAt = false,
        VisibleCheck = false,
        Key = 'c',
        healthonplr = false,
        AutoSetup = false,
        Ben = false,
        GoTo = false,
        Highlight = false,
        HighlightFill = Color3.fromRGB(255,255,255),
        HighlightOutline = Color3.fromRGB(251,255,255),
        ffcolor = Color3.fromRGB(255,255,255),
        fhbcolor = Color3.fromRGB(255,255,255),
        dotcolor = Color3.fromRGB(255,255,255), 
        tracercolor = Color3.fromRGB(255,255,255),
        speed = 0,
        height = 0,
        distance = 0,
        target_strafe = false
},
  CamLock = {
    Enabled = false,
    Prediction = 0.1413,
    AutoPrediction = false,
    Resolver = false,
    Smoothness = 0,
    ShakeValue = 12,
    Part = "Head",
    RandomHP = false,
    AutoSetup = false,
    Wallcheck = false,
    GrabbedCheck = false,
    KnockedCheck = false,
    VisibleCheck = false
    },
    RageBot = {
        Enabled = false,
        Distance = 50, 
        AimPart = "Head",
        LookAt  = false, 
        Resolver = false
    },
  Misc = {
   Speed = false,
   SpeedType = "BHop",
   LolSpeed = 50,
   Spinbot = false,
   SpinSpeed = 50,
   AntiBag = false, 
   AutoReload = false,
   PickUpMoney = false, 
   AntiStomp = false,
   Bhop = false,
   FakeMacro = false, -- // Kinda Legit
   CustomGunSFX = false, 
   ID = "rbxassetid://6607204501",
   Volume = 10
    }, 
  Visual = {
   LocalCham = true,
   GunCham = true,
   GunColor = Color3.fromRGB(255,255,255),
   Highlight = true,
   HighlightFillColor = Color3.fromRGB(255,0,0),
   HighlightOutlineColor = Color3.fromRGB(255,255,255),
   CloneChams = false,
   CloneColor = Color3.fromRGB(255,255,255),
   CloneMaterial = "ForceField",
   CloneDuration = 0.2,
   TrailColor = Color3.fromRGB(255,255,251),
   CustomFOV = false,
   FOV = 100,
   Ratio = false,
   RatioValue = 24,
   CustomAmbient = false,
   Ambient = Color3.fromRGB(255,255,255),
   OutdoorAmbient = Color3.fromRGB(255,255,255)
  },
  Cursor = {
   Spinning = false,
   Rainbow = false, 
   SpinSpeed = 1
   },
}

local SenHVH_visuals = { 
    Forcefield = { 
        Color = Color3.fromRGB(255,255,255),
        Size = Vector3.new(14, 14, 14),
        Material = 'ForceField'
    },

    Dot = { 
        Color = Color3.fromRGB(255,255,255),
        Size = Vector3.new(0.9, 1.2, 0.9),
        DotOrigin = 'LowerTorso',
        Material = 'Neon'
    },
    FakeHitbox = { 
        Color = Color3.fromRGB(255,255,255),
        Size = Vector3.new(5, 5, 5),
        Material = 'ForceField'
    },

    Tracer = { 
        TracerThickness = 3.5,
        TracerTransparency = 1,
        TracerColor = Color3.fromRGB(255,255,255)
    }
}

local LocalPlayer = game.Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local CurrentCamera = workspace.CurrentCamera 
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local SenHVH_victim = nil
local Inset = game:GetService("GuiService"):GetGuiInset().Y
local Line = Drawing.new("Line")
local SenHVH_aimbot_victim

 -- parent is workspace :GHASP:
local Forcefield = Instance.new("Part", game.Workspace)

Forcefield.Size = SenHVH_visuals.Forcefield.Size 
Forcefield.CanCollide = false 
Forcefield.Anchored = true
Forcefield.Shape = Enum.PartType.Ball
Forcefield.Transparency = 1
Forcefield.Name = "beg"


local Dot = Instance.new("Part", game.Workspace)

Dot.Size = SenHVH_visuals.Dot.Size
Dot.CanCollide = false
Dot.Anchored = true
Dot.Shape = Enum.PartType.Ball 
Dot.Name = "LorisKJiggaboo"

local Hitbox = Instance.new("Part", game.Workspace)

Hitbox.Size = SenHVH_visuals.FakeHitbox.Size
Hitbox.CanCollide = false 
Hitbox.Anchored = true
Hitbox.Shape = Enum.PartType.Block 
Hitbox.Name = "LorisNigger"

spawn(function()
    RunService.Stepped:Connect(function()
        Forcefield.Material = SenHVH_visuals.Forcefield.Material 
        Dot.Material = SenHVH_visuals.Dot.Material
        Hitbox.Material = SenHVH_visuals.FakeHitbox.Material
    end)
end)

spawn(function()
    RunService.Heartbeat:Connect(function()
        if SenHVH.target.Enabled and SenHVH.target.Locking and SenHVH.target.Forcefield then
            Forcefield.Transparency = 0 
        else
            Forcefield.Transparency = 1
        end
    
        if SenHVH.target.Enabled and SenHVH.target.Forcefield and SenHVH.target.Locking then
            Forcefield.CFrame = CFrame.new(SenHVH_victim.Character[SenHVH.target.Part].Position)
        else
            Forcefield.CFrame = CFrame.new(0, 0, 0)
        end
        
        Forcefield.Color = SenHVH.target.ffcolor
    
    
        if SenHVH.target.Enabled and SenHVH.target.Locking and SenHVH.target.Dot then
            Dot.Transparency = 0
        else
            Dot.Transparency = 1 
        end
    
        if SenHVH.target.Enabled and SenHVH.target.Locking and SenHVH.target.Dot then
            Dot.CFrame = CFrame.new(SenHVH_victim.Character[SenHVH.target.Part].Position + (SenHVH_victim.Character[SenHVH.target.Part].Velocity * SenHVH.target.Prediction))
        end
    
        Dot.Color = SenHVH.target.dotcolor
    
        if SenHVH.target.Enabled and SenHVH.target.Locking and SenHVH.target.Tracer then
            local heyloris = CurrentCamera:WorldToViewportPoint(SenHVH_victim.Character[SenHVH.target.Part].Position + SenHVH_victim.Character.HumanoidRootPart.Velocity * SenHVH.target.Prediction)
    
    
            Line.Color = SenHVH.target.tracercolor
            Line.Thickness = SenHVH_visuals.Tracer.TracerThickness
            Line.From = Vector2.new(Mouse.X, Mouse.Y + Inset)
            Line.To = Vector2.new(heyloris.X, heyloris.Y)
            Line.Visible = true
        else
            Line.Visible = false
        end
    
        
    
        if SenHVH.target.Enabled and SenHVH.target.Locking and SenHVH.target.FakeHitbox then
            Hitbox.Transparency = 0
        else
            Hitbox.Transparency = 1
        end
    
        
    
        if SenHVH.target.Enabled and SenHVH.target.FakeHitbox and SenHVH.target.Locking then
            Hitbox.CFrame = CFrame.new(SenHVH_victim.Character[SenHVH.target.Part].Position)
        else
            Hitbox.CFrame = CFrame.new(0,0,0)
        end
    
        Hitbox.Color = SenHVH.target.fhbcolor
    
        if SenHVH.target.Enabled and SenHVH.target.LookAt and SenHVH.target.Locking then          
            LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(LocalPlayer.Character.HumanoidRootPart.Position, Vector3.new(SenHVH_victim.Character.HumanoidRootPart.CFrame.X, LocalPlayer.Character.HumanoidRootPart.CFrame.Position.Y, SenHVH_victim.Character.HumanoidRootPart.CFrame.Z))
        end
    
